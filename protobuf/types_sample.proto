/* SearchRequest represents a search query, with pagination options to
 * indicate which results to include in the response. */

syntax = "proto3";

// Importing Definitions
// **Note that this feature is not available in Java.**
// old.proto
// This is the proto that all clients are importing.
import public "new.proto";
import "other.proto";

message SearchRequest {
  string query = 1;
  int32 page_number = 2;  // Which page number do we want?
  int32 result_per_page = 3;
  enum Corpus {
    UNIVERSAL = 0;
    WEB = 1;
    IMAGES = 2;
    LOCAL = 3;
    NEWS = 4;
    PRODUCTS = 5;
    VIDEO = 6;
  }
  Corpus corpus = 4;
  // Reserved Values
  reserved 2, 15, 9 to 11;
  reserved 2, 15, 9 to 11, 40 to max;
  reserved "foo", "bar";
  enum EnumAllowingAlias {
    option allow_alias = true;
    UNKNOWN = 0;
    STARTED = 1;
    RUNNING = 1; // It can be accepted with `allow_alias = true`
  }
  // Using Other Message Types
  repeated Result results = 1;

  // Nested Types
  message Result2 {
    string url = 1;
    string title = 2;
    repeated string snippets = 3;
  }
  repeated Result2 result2 = 1;
}

// reserved
message Result {
  string url = 1;
  string title = 2;
  repeated string snippets = 3;
}

// Nested Types: Re-Use
message SomeOtherMessage {
  SearchResponse.Result result = 1;
}

message Outer {       // Level 0
  message MiddleAA {  // Level 1
    message Inner {   // Level 2
      int64 ival = 1;
      bool  booly = 2;
    }
  }
  message MiddleBB {  // Level 1
    message Inner {   // Level 2
      int32 ival = 1;
      bool  booly = 2;
    }
  }
}

// Any
message ErrorStatus {
  string message = 1;
  repeated google.protobuf.Any details = 2;
}

// // Storing an arbitrary message type in Any.
// NetworkErrorDetails details = ...;
// ErrorStatus status;
// status.add_details()->PackFrom(details);

// // Reading an arbitrary message from Any.
// ErrorStatus status = ...;
// for (const Any& detail : status.details()) {
//   if (detail.Is<NetworkErrorDetails>()) {
//     NetworkErrorDetails network_error;
//     detail.UnpackTo(&network_error);
//     ... processing network_error ...
//   }
// }

// Oneof
message SampleMessage {
  oneof test_oneof {
    string name = 4;
    SubMessage sub_message = 9;
  }
}


// Maps
// map<key_type, value_type> map_field = N;
message MapMessage {
  map<string, Project> projects = 3;
}
message MapFieldEntry {
  key_type key = 1;
  value_type value = 2;
}

repeated MapFieldEntry map_field = N;

package foo.bar;
message Open { ... }
message Foo {
  ...
  foo.bar.Open open = 1;
  ...
}

// Defining Services
service SearchService {
  rpc Search(SearchRequest) returns (SearchResponse);
}


message SearchResponse {
 ...
}